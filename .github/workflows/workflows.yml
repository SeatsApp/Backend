name: Build
on:
  [ push ]
env:
  SERVICE_NAME: "seatapp"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 18
        uses: actions/setup-java@v1
        with:
          java-version: 18
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Make Gradle wrapper
        run: gradle wrapper
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 18
        uses: actions/setup-java@v1
        with:
          java-version: 18
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Run tests
        run: gradle check
  deploy-service-production:
    needs: [ build, tests ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 18
        uses: actions/setup-java@v1
        with:
          java-version: 18
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Make Gradle wrapper
        run: gradle wrapper
      - name: prereqs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'eu-west-1'
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION
          aws configure set region $AWS_DEFAULT_REGION
          cat ~/.aws/credentials
      - name: Install essentials
        run: |
          aws --version

          # install LightsailCTL Plugin (https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-install-software)
          sudo apt-get update && sudo apt-get -y install curl jq
          curl https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl -o /usr/local/bin/lightsailctl
          chmod +x /usr/local/bin/lightsailctl
      - name: Build gradle
        run: |
          ./gradlew build
      - name: Release to Amazon Lightsail
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          echo "Releasing to Amazon Lightsail"

          docker info

          #create image
          docker build -t ${{ env.SERVICE_NAME }} .

          # upload the docker image for this pipeline
          aws lightsail push-container-image \
          --service-name ${{ env.SERVICE_NAME }}  \
          --label ${{ env.SERVICE_NAME }}  \
          --image ${{ env.SERVICE_NAME }}:latest

          # get uploaded image (its different every time)
          IMAGE_TAG=$(aws lightsail get-container-images --service ${{ env.SERVICE_NAME }} | jq -r .containerImages[0].image)

          # create a deployment with uploaded docker image
          aws lightsail create-container-service-deployment \
          --service-name ${{ env.SERVICE_NAME }} \
          --containers "{
          \"${{ env.SERVICE_NAME }}\": {
            \"image\": \"$IMAGE_TAG\",
            \"environment\": {
              \"AZURE_CLIENT_SECRET\": \"${{ env.AZURE_CLIENT_SECRET }}\",
              \"JWT_SECRET\": \"${{ env.JWT_SECRET }}\",
              \"SPRING_PROFILES_ACTIVE\": \"prod\"
              },
            \"ports\": {
              \"8080\": \"HTTP\"
              }
            }
          }" \
            --public-endpoint "{
              \"containerName\": \"${{ env.SERVICE_NAME }}\",
              \"containerPort\": 8080,
              \"healthCheck\": {
                \"path\": \"/actuator/health\",
                \"timeoutSeconds\": 60,
                \"intervalSeconds\": 120
              }
          }"